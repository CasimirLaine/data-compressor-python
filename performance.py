import os
import random
import string
import sys
import time
from functools import wraps
from pathlib import Path
from typing import Type

root_path = Path(__file__).resolve().parent
path_prefix = f'{root_path}{os.sep}'
sys.path.append(f'{path_prefix}src')

from compress.common import io, Encoder, Decoder, CompressionAlgorithm
from compress import huffman

__N = [1_000, 10_000, 100_000, 1_000_000, 10_000_000, 100_000_000]

__ALGORITHMS = [
    huffman.Huffman,
    # lz.LZ,
]

__FILES = [
    'sample/simple.txt',
    'sample/lorem.txt',
    'sample/image.png',
    'sample/small_image.jpeg',
    'sample/big_image.jpg',
]


def to_mb(byte_size: int):
    return round(byte_size / 1024, 3)


def calc_ratio(percentage: float):
    return round(percentage, 3)


def timed(func):
    @wraps(func)
    def timed_wrapper(*args, **kwargs):
        start_time = time.process_time()
        result = func(*args, **kwargs)
        end_time = time.process_time()
        total_time = end_time - start_time
        print(f'{total_time:.4f} seconds')
        return result

    return timed_wrapper


@timed
def measure_encoding_performance(input_bytes: bytes, compressor: Encoder):
    return compressor.encode(input_bytes)


@timed
def measure_decoding_performance(input_bytes: bytes, decompressor: Decoder):
    return decompressor.decode(input_bytes)


def print_results(input_bytes: bytes, output_bytes: bytes):
    size_original = to_mb(len(input_bytes))
    size_compressed = to_mb(len(output_bytes))
    compression_ratio = size_compressed / size_original
    print()
    print(f'Original data: {size_original} KB')
    print()
    print(f'Compressed data: {size_compressed} KB')
    print()
    print(f'{calc_ratio(compression_ratio)}% of the original')
    print()


def random_bytes(n):
    return ''.join(random.choice(string.printable) for _ in range(n)).encode()


def measure(input_bytes: bytes, algorithm: Type[CompressionAlgorithm]):
    print("###### Encoding")
    result = measure_encoding_performance(input_bytes, algorithm.get_encoder()())
    print("###### Decoding")
    measure_decoding_performance(result, algorithm.get_decoder()())
    print("###### Compression Performance")
    print_results(input_bytes, result)


def start_performance_tests():
    print("File performance")
    for algorithm in __ALGORITHMS:
        print(f'### {algorithm.__name__}')
        for file_name in __FILES:
            print(f'#### {file_name}')
            file_path = os.path.join(root_path, file_name)
            input_bytes = io.read_file(file_path)
            measure(input_bytes, algorithm)
        for n in __N:
            print(f'#### {n} randomly generated bytes')
            generated_bytes = random_bytes(n)
            measure(generated_bytes, algorithm)


if __name__ == '__main__':
    start_performance_tests()
